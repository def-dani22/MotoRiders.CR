@model List<MotoRiders.CR.Models.Producto>

@{
    ViewBag.Title = "Index";
}

<div class="container">
    <h1 class="text-center my-4">Motos Eléctricas</h1>
    <form action="@Url.Action("AgregarProductosAlCarrito", "Producto")" method="post">
        <div class="row">
            @foreach (var item in Model)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card">
                        <img src="@Url.Content(item.Img)" alt="@item.Nombre" class="card-img-top img-fluid">
                        <div class="card-body">
                            <h5 class="card-title">@item.Nombre</h5>
                            <p class="card-text"><strong>Modelo:</strong> @item.Modelo</p>
                            <p class="card-text"><strong>Precio:</strong> @item.PrecioVenta.ToString("C")</p>
                            <label class="checkbox-btn">
                                <input type="checkbox" class="form-check-input motocicleta" name="productosSeleccionados" value="@item.Id">
                                <span class="checkmark"></span>
                            </label>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row justify-content-center">
            <div class="col-12 text-center">
                <button type="submit" class="btn btn-primary">Agregar al Carrito</button>
            </div>
        </div>
    </form>
</div>
<script>
    // Función para seleccionar un ítem (ejemplo con checkboxes)
    function selectItem(button) {
        var cardBody = button.parentElement;
        var checkbox = cardBody.querySelector('.form-check-input');
        checkbox.checked = true;
    }

    // Función para desmarcar todos los checkboxes
    function uncheckAllCheckboxes() {
        var checkboxes = document.querySelectorAll('.form-check-input');
        checkboxes.forEach(function (checkbox) {
            checkbox.checked = false;
        });
    }

    // Función para mostrar el tooltip de "Agregado al carrito" y luego restaurar el estado original
    function showTooltip() {
        var tooltip = document.querySelector('.buttonC');
        tooltip.setAttribute('data-tooltip', 'Agregando al carrito');

        // Simular un proceso de agregado al carrito con un delay
        setTimeout(function () {
            // Cambiar el tooltip después de agregar al carrito
            tooltip.setAttribute('data-tooltip', 'Agregado al carrito');

            // Restaurar el tooltip al estado original después de 3 segundos
            setTimeout(function () {
                tooltip.setAttribute('data-tooltip', 'Agregado');
                tooltip.classList.remove('added'); // Remover clase de estilo de agregado si es necesario
            }, 3000); // Quitar el tooltip después de 3 segundos

            // Opcional: Aquí podrías agregar más lógica después de agregar al carrito
            // Por ejemplo, redirigir a la página de carrito, actualizar la cantidad de elementos en el carrito, etc.
        }, 1000); // Simular un tiempo de proceso (1 segundo)
    }

    // Event listener para el botón "Agregar al Carrito"
    document.querySelector('.buttonC').addEventListener('click', function () {
        // Llamar a la función para desmarcar todos los checkboxes
        uncheckAllCheckboxes();

        // Llamar a la función para mostrar el tooltip y simular el proceso de agregado
        showTooltip();
    });
</script>



<!-- Agregar enlaces a Bootstrap JS y Popper.js (requeridos para algunos componentes de Bootstrap) -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<!-- Enlace al archivo JavaScript personalizado -->
<script src="script.js"></script>